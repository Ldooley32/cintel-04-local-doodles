[{"name": "app.py", "content": "import plotly.express as px\nimport seaborn as sns\nfrom shiny.express import input, ui\nfrom shiny import reactive, render  # Import render module\nfrom shinywidgets import render_plotly\nimport palmerpenguins  # provides the Palmer Penguin dataset\n\n# Use the built-in function to load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Mrs. Doodles Penguins\", fillable=True)\n\n# Define a dictionary mapping display names to original column names\ncolumn_mapping = {\n    \"Bill Length (mm)\": \"bill_length_mm\",\n    \"Bill Depth (mm)\": \"bill_depth_mm\",\n    \"Flipper Length (mm)\": \"flipper_length_mm\",\n    \"Body Mass (g)\": \"body_mass_g\"\n}\n\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    # pass in a string argument (in quotes) to set the header text to \"Sidebar\"\n    ui.h2(\"Sidebar\")\n\n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\"selected_attribute\", \"Selected Attribute\",\n                       list(column_mapping.keys()))\n\n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 40)\n\n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 0, 100, 40)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"selected_species_list\", \"Species\",\n                            [\"Adelie\", \"Gentoo\", \"Chinstrap\"], selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"])\n    \n    #Use ui.input_checkbox_group() to create a checkbox group input to filter the islands\n    ui.input_checkbox_group(\"selected_island_list\", \"Island\",\n                            [\"Torgersen\", \"Biscoe\", \"Dream\"], selected= [\"Torgersen\", \"Biscoe\", \"Dream\"])\n    \n    # Use ui.input_checkbox() to create a checkbox to show the sex\n    ui.input_checkbox(\"show_sex\", \"Show Sex\")\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"GitHub\", href=\"https://github.com/Ldooley32/cintel03-reactive-doodles/blob/main/app.py\", target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.accordion(id=\"acc\", open=\"open\"):\n        with ui.accordion_panel(\"Data Table\"):\n            @render.data_frame\n            def penguin_datatable():\n                return render.DataTable(penguins_df)\n\n        with ui.accordion_panel(\"Data Grid\"):\n            @render.data_frame\n            def penguin_datagrid():\n                return render.DataGrid(penguins_df)\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[\n        (penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"].isin(input.selected_island_list()))\n    ]\n\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Plotly Histogram\"):\n\n        # Create a function to render the Plotly histogram\n        @render_plotly\n        def plotly_histogram():\n            # Create a Plotly histogram with dynamic attributes and bin count based on user inputs\n            selected_attribute = input.selected_attribute()\n            plotly_bin_count = input.plotly_bin_count()\n            show_sex = input.show_sex()\n\n            if show_sex:\n                title = f\"Plotly Histogram for {selected_attribute} (Sex Included)\"\n                xaxis_title = f\"{selected_attribute} (with Sex)\"\n            else:\n                title = f\"Plotly Histogram for {selected_attribute}\"\n                xaxis_title = selected_attribute\n\n            histogram = px.histogram(\n                filtered_data(),\n                x=column_mapping[selected_attribute],\n                color=\"sex\" if show_sex else \"species\",\n                title=title,\n                labels={column_mapping[selected_attribute]: xaxis_title},\n                nbins=plotly_bin_count,\n            )\n            return histogram\n\n    with ui.nav_panel(\"Seaborn Histogram\"):\n        # Create a function to render the Seaborn histogram\n        @render.plot\n        def seaborn_histogram():\n            selected_attribute = input.selected_attribute()\n            seaborn_bin_count = input.seaborn_bin_count()\n            show_sex = input.show_sex()\n\n            title = f\"Seaborn Histogram for {selected_attribute}\"\n            if show_sex:\n                title += \" (Sex Included)\"\n\n            sns.set(style=\"whitegrid\")  # Set Seaborn style\n            seaborn_histogram = sns.histplot(\n                filtered_data(),\n                x=column_mapping[selected_attribute],\n                hue=\"sex\" if show_sex else \"species\",\n                bins=seaborn_bin_count,\n            )\n            # Update titles and labels\n            seaborn_histogram.set_title(title)\n\n            return seaborn_histogram\n\n    with ui.nav_panel(\"Scatterplot\"):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def ploty_scatterplot():\n            selected_species_list = input.selected_species_list()\n            filtered_df = penguins_df[penguins_df[\"species\"].isin(selected_species_list)]\n            plotly_scatter = px.scatter(\n                filtered_df,\n                x=\"body_mass_g\",\n                y=\"bill_length_mm\",\n                color=\"species\",\n                size_max=7,\n                labels={\n                    \"body_mass_g\": \"Body Mass (g)\",\n                    \"bill_length_mm\": \"Bill Length(mm)\",\n                },\n            )\n            return plotly_scatter\n", "type": "text"}]